import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import {
  getAuth,
  signInAnonymously,
  signInWithCustomToken,
  onAuthStateChanged,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut
} from 'firebase/auth';
import { getFirestore, collection, query, onSnapshot, addDoc, updateDoc, deleteDoc, serverTimestamp } from 'firebase/firestore';

function App() {
  // Zustand für Firebase-Instanzen und Benutzer-ID
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false); // Um zu verfolgen, wann die Authentifizierung bereit ist

  // Zustand für die Navigation
  const [currentView, setCurrentView] = useState('dashboard'); // 'dashboard', 'tasks', 'notes', 'calendar'

  // Zustand für Aufgaben
  const [tasks, setTasks] = useState([]);
  const [newTaskText, setNewTaskText] = useState('');
  const [newTaskArea, setNewTaskArea] = useState(''); // Bereich für Aufgaben
  const [newTaskPriority, setNewTaskPriority] = useState('medium'); // Priorität für Aufgaben
  const [newTaskDueDate, setNewTaskDueDate] = useState(''); // Fälligkeitsdatum für Aufgaben

  // Zustand für Notizen
  const [notes, setNotes] = useState([]);
  const [newNoteTitle, setNewNoteTitle] = useState('');
  const [newNoteContent, setNewNoteContent] = useState('');
  const [newNoteArea, setNewNoteArea] = useState(''); // Bereich für Notizen
  const [selectedNote, setSelectedNote] = useState(null); // Für die Anzeige/Bearbeitung einer Notiz

  // Zustand für die Schnellerfassung
  const [quickAddText, setQuickAddText] = useState('');
  const [quickAddArea, setQuickAddArea] = useState(''); // Bereich für Schnellerfassung

  // Zustand für den KI-Assistenten
  const [aiCommandText, setAiCommandText] = useState('');
  const [aiLoading, setAiLoading] = useState(false);
  const [aiMessage, setAiMessage] = useState('');

  // Zustand für den Kalender
  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());
  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
  const [calendarView, setCalendarView] = useState('month'); // 'month', 'week', 'day'
  const [selectedCalendarDate, setSelectedCalendarDate] = useState(new Date()); // Für Wochen- und Tagesansicht

  // Zustand für Ereignisse (Events)
  const [events, setEvents] = useState([]);
  const [newEventTitle, setNewEventTitle] = useState('');
  const [newEventDate, setNewEventDate] = useState(new Date().toISOString().split('T')[0]); //YYYY-MM-DD
  const [newEventStartTime, setNewEventStartTime] = useState('09:00');
  const [newEventEndTime, setNewEventEndTime] = useState('10:00');
  const [newEventArea, setNewEventArea] = useState('');

  // Zustand für Authentifizierung
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoginMode, setIsLoginMode] = useState(true); // true for login, false for register
  const [authError, setAuthError] = useState('');
  const [authLoading, setAuthLoading] = useState(false);

  // Firebase-Initialisierung und Authentifizierung
  useEffect(() => {
    try {
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
      const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');

      if (!Object.keys(firebaseConfig).length) {
        console.error("Firebase Konfiguration ist leer. Bitte stellen Sie sicher, dass __firebase_config korrekt gesetzt ist.");
        return;
      }

      const app = initializeApp(firebaseConfig);
      const firestoreDb = getFirestore(app);
      const firebaseAuth = getAuth(app);

      setDb(firestoreDb);
      setAuth(firebaseAuth);

      // Authentifizierung
      const unsubscribeAuth = onAuthStateChanged(firebaseAuth, async (user) => {
        if (user) {
          setUserId(user.uid);
        } else {
          // If no user is logged in, try to sign in anonymously
          if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
            try {
              await signInWithCustomToken(firebaseAuth, __initial_auth_token);
            } catch (error) {
              console.error("Fehler bei der Anmeldung mit benutzerdefiniertem Token:", error);
              try {
                await signInAnonymously(firebaseAuth);
              } catch (anonError) {
                console.error("Fehler bei der anonymen Anmeldung:", anonError);
              }
            }
          } else {
            try {
              await signInAnonymously(firebaseAuth);
            } catch (anonError) {
              console.error("Fehler bei der anonymen Anmeldung:", anonError);
            }
          }
        }
        setIsAuthReady(true); // Auth process is complete
      });

      // Cleanup-Funktion für den Auth-Listener
      return () => unsubscribeAuth();
    } catch (error) {
      console.error("Fehler bei der Firebase-Initialisierung:", error);
    }
  }, []); // Leeres Abhängigkeits-Array, damit dies nur einmal ausgeführt wird

  // Firestore-Listener für Aufgaben
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const tasksCollectionRef = collection(db, `artifacts/${__app_id}/users/${userId}/tasks`);
      const q = query(tasksCollectionRef);

      const unsubscribeTasks = onSnapshot(q, (snapshot) => {
        const fetchedTasks = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
          dueDate: doc.data().dueDate ? doc.data().dueDate.toDate() : null // Convert Firestore Timestamp to Date object
        })).sort((a, b) => {
          const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1, '': 0, undefined: 0 };
          const priorityA = priorityOrder[a.priority] || 0;
          const priorityB = priorityOrder[b.priority] || 0;

          if (priorityA !== priorityB) {
            return priorityB - priorityA;
          }
          return (a.createdAt?.toDate() || 0) - (b.createdAt?.toDate() || 0);
        });
        setTasks(fetchedTasks);
      }, (error) => {
        console.error("Fehler beim Abrufen von Aufgaben:", error);
      });

      return () => unsubscribeTasks();
    }
  }, [db, userId, isAuthReady]);

  // Firestore-Listener für Notizen
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const notesCollectionRef = collection(db, `artifacts/${__app_id}/users/${userId}/notes`);
      const q = query(notesCollectionRef);

      const unsubscribeNotes = onSnapshot(q, (snapshot) => {
        const fetchedNotes = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        })).sort((a, b) => (a.createdAt?.toDate() || 0) - (b.createdAt?.toDate() || 0));
        setNotes(fetchedNotes);
      }, (error) => {
        console.error("Fehler beim Abrufen von Notizen:", error);
      });

      return () => unsubscribeNotes();
    }
  }, [db, userId, isAuthReady]);

  // Firestore-Listener für Ereignisse (Events)
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const eventsCollectionRef = collection(db, `artifacts/${__app_id}/users/${userId}/events`);
      const q = query(eventsCollectionRef);

      const unsubscribeEvents = onSnapshot(q, (snapshot) => {
        const fetchedEvents = snapshot.docs.map(doc => {
          const startTimestamp = doc.data().start;
          const endTimestamp = doc.data().end;
          let startDate = null;
          let endDate = null;

          if (startTimestamp && typeof startTimestamp.toDate === 'function') {
            const tempDate = startTimestamp.toDate();
            if (tempDate instanceof Date && !isNaN(tempDate)) {
              startDate = tempDate;
            }
          }
          if (endTimestamp && typeof endTimestamp.toDate === 'function') {
            const tempDate = endTimestamp.toDate();
            if (tempDate instanceof Date && !isNaN(tempDate)) {
              endDate = tempDate;
            }
          }

          return {
            id: doc.id,
            ...doc.data(),
            start: startDate,
            end: endDate,
          };
        }).filter(event => event.start && event.end)
          .sort((a, b) => a.start - b.start);
        setEvents(fetchedEvents);
      }, (error) => {
        console.error("Fehler beim Abrufen von Ereignissen:", error);
      });

      return () => unsubscribeEvents();
    }
  }, [db, userId, isAuthReady]);

  // Authentifizierungsfunktionen
  const handleAuthAction = async () => {
    setAuthError('');
    setAuthLoading(true);
    if (!auth) {
      setAuthError("Firebase Auth ist nicht initialisiert.");
      setAuthLoading(false);
      return;
    }

    try {
      if (isLoginMode) {
        await signInWithEmailAndPassword(auth, email, password);
        setAiMessage('Erfolgreich angemeldet!');
      } else {
        await createUserWithEmailAndPassword(auth, email, password);
        setAiMessage('Erfolgreich registriert und angemeldet!');
      }
    } catch (error) {
      console.error("Authentifizierungsfehler:", error);
      let errorMessage = "Ein unbekannter Fehler ist aufgetreten.";
      switch (error.code) {
        case 'auth/invalid-email':
          errorMessage = 'Ungültige E-Mail-Adresse.';
          break;
        case 'auth/user-disabled':
          errorMessage = 'Dieser Benutzer wurde deaktiviert.';
          break;
        case 'auth/user-not-found':
          errorMessage = 'Kein Benutzer mit dieser E-Mail gefunden.';
          break;
        case 'auth/wrong-password':
          errorMessage = 'Falsches Passwort.';
          break;
        case 'auth/email-already-in-use':
          errorMessage = 'Diese E-Mail-Adresse wird bereits verwendet.';
          break;
        case 'auth/weak-password':
          errorMessage = 'Das Passwort ist zu schwach (mindestens 6 Zeichen).';
          break;
        default:
          errorMessage = `Fehler: ${error.message}`;
      }
      setAuthError(errorMessage);
    } finally {
      setAuthLoading(false);
    }
  };

  const handleLogout = async () => {
    if (auth) {
      try {
        await signOut(auth);
        setUserId(null); // Clear userId on logout
        setAiMessage('Erfolgreich abgemeldet.');
        setCurrentView('dashboard'); // Go back to dashboard/login screen
      } catch (error) {
        console.error("Fehler beim Abmelden:", error);
        setAiMessage('Fehler beim Abmelden.');
      }
    }
  };


  // Funktionen für Aufgaben
  const addTask = async (text, area, priority = 'medium', dueDate = null) => {
    if (text.trim() === '' || !db || !userId) return;
    try {
      await addDoc(collection(db, `artifacts/${__app_id}/users/${userId}/tasks`), {
        text: text,
        completed: false,
        area: area || '',
        priority: priority,
        createdAt: serverTimestamp(),
        dueDate: dueDate ? new Date(dueDate) : null, // Save dueDate as Date object or null
      });
      setNewTaskText('');
      setNewTaskArea('');
      setNewTaskPriority('medium');
      setNewTaskDueDate(''); // Clear due date
      setAiMessage('Aufgabe erfolgreich hinzugefügt!');
    } catch (e) {
      console.error("Fehler beim Hinzufügen der Aufgabe:", e);
      setAiMessage('Fehler beim Hinzufügen der Aufgabe.');
    }
  };

  const toggleTaskComplete = async (id, completed) => {
    if (!db || !userId) return;
    try {
      await updateDoc(doc(db, `artifacts/${__app_id}/users/${userId}/tasks`, id), {
        completed: !completed
      });
    } catch (e) {
      console.error("Fehler beim Aktualisieren der Aufgabe:", e);
    }
  };

  const deleteTask = async (id) => {
    if (!db || !userId) return;
    try {
      await deleteDoc(doc(db, `artifacts/${__app_id}/users/${userId}/tasks`, id));
    } catch (e) {
      console.error("Fehler beim Löschen der Aufgabe:", e);
    }
  };

  const updateTaskPriority = async (id, newPriority) => {
    if (!db || !userId) return;
    try {
      await updateDoc(doc(db, `artifacts/${__app_id}/users/${userId}/tasks`, id), {
        priority: newPriority
      });
    } catch (e) {
      console.error("Fehler beim Aktualisieren der Priorität:", e);
    }
  };

  // Funktionen für Notizen
  const addNote = async (title, content, area) => {
    if (title.trim() === '' || content.trim() === '' || !db || !userId) return;
    try {
      await addDoc(collection(db, `artifacts/${__app_id}/users/${userId}/notes`), {
        title: title,
        content: content,
        area: area || '',
        createdAt: serverTimestamp(),
      });
      setNewNoteTitle('');
      setNewNoteContent('');
      setNewNoteArea('');
      setAiMessage('Notiz erfolgreich hinzugefügt!');
    } catch (e) {
      console.error("Fehler beim Hinzufügen der Notiz:", e);
      setAiMessage('Fehler beim Hinzufügen der Notiz.');
    }
  };

  const deleteNote = async (id) => {
    if (!db || !userId) return;
    try {
      await deleteDoc(doc(db, `artifacts/${__app_id}/users/${userId}/notes`, id));
    } catch (e) {
      console.error("Fehler beim Löschen der Notiz:", e);
    }
  };

  const handleNoteClick = (note) => {
    setSelectedNote(note);
  };

  const closeNoteModal = () => {
    setSelectedNote(null);
  };

  // Funktionen für Ereignisse (Events)
  const addEvent = async () => {
    if (newEventTitle.trim() === '' || !db || !userId) {
      setAiMessage('Titel für das Ereignis ist erforderlich.');
      return;
    }

    const startDateTime = new Date(`${newEventDate}T${newEventStartTime}:00`);
    const endDateTime = new Date(`${newEventDate}T${newEventEndTime}:00`);

    if (isNaN(startDateTime.getTime()) || isNaN(endDateTime.getTime()) || startDateTime >= endDateTime) {
      setAiMessage('Ungültige Start- oder Endzeit für das Ereignis. Bitte überprüfen Sie Datum und Uhrzeit.');
      return;
    }

    try {
      await addDoc(collection(db, `artifacts/${__app_id}/users/${userId}/events`), {
        title: newEventTitle,
        start: startDateTime,
        end: endDateTime,
        area: newEventArea || '',
        createdAt: serverTimestamp(),
      });
      setNewEventTitle('');
      setNewEventDate(new Date().toISOString().split('T')[0]);
      setNewEventStartTime('09:00');
      setNewEventEndTime('10:00');
      setNewEventArea('');
      setAiMessage('Ereignis erfolgreich hinzugefügt!');
    } catch (e) {
      console.error("Fehler beim Hinzufügen des Ereignisses:", e);
      setAiMessage('Fehler beim Hinzufügen des Ereignisses.');
    }
  };

  const deleteEvent = async (id) => {
    if (!db || !userId) return;
    try {
      await deleteDoc(doc(db, `artifacts/${__app_id}/users/${userId}/events`, id));
    } catch (e) {
      console.error("Fehler beim Löschen des Ereignisses:", e);
    }
  };


  // Funktion für die Schnellerfassung
  const handleQuickAdd = async () => {
    if (quickAddText.trim() === '' || !userId) {
      setAiMessage('Bitte melde dich an, um diese Funktion zu nutzen.');
      return;
    }

    const lowerCaseText = quickAddText.toLowerCase();
    const areaToUse = quickAddArea.trim();

    if (lowerCaseText.startsWith('notiz:') || lowerCaseText.startsWith('memo:')) {
      const content = quickAddText.substring(lowerCaseText.indexOf(':') + 1).trim();
      const title = content.split(' ').slice(0, 3).join(' ') || 'Neue Notiz';
      await addNote(title, content, areaToUse);
    } else {
      // If quick add is a task, no due date is set by default
      await addTask(quickAddText, areaToUse, 'medium', null);
    }
    setQuickAddText('');
    setQuickAddArea('');
  };

  // Funktion für den KI-Assistenten
  const handleAICommand = async () => {
    if (aiCommandText.trim() === '' || !userId) {
      setAiMessage('Bitte melde dich an, um den KI-Assistenten zu nutzen.');
      return;
    }

    setAiLoading(true);
    setAiMessage('Verarbeite Befehl...');

    try {
      let chatHistory = [];
      const prompt = `Du bist ein hilfreicher Assistent für eine Organisations-App.
      Der Benutzer gibt dir Anweisungen in natürlicher Sprache.
      Deine Aufgabe ist es, diese Anweisung in eine strukturierte JSON-Antwort umzuwandeln, die die App verwenden kann.

      Verfügbare Aktionen:
      - "addTask": Fügt eine neue Aufgabe hinzu. Benötigt 'text' (String) und optional 'area' (String), 'priority' (String: "low", "medium", "high") und 'dueDate' (String im Format YYYY-MM-DD oder null).
      - "addNote": Fügt eine neue Notiz hinzu. Benötigt 'title' (String), 'content' (String) und optional 'area' (String).
      - "none": Keine spezifische Aktion erforderlich, aber du kannst eine 'message' zurückgeben.

      Gib IMMER ein JSON-Objekt zurück, das dem folgenden Schema entspricht:
      {
        "action": "addTask" | "addNote" | "none",
        "data": {
          "text"?: string, // Nur für addTask
          "priority"?: "low" | "medium" | "high", // Neu für addTask, Standard ist "medium" wenn nicht anders angegeben
          "dueDate"?: string | null, // Neu für addTask, im Format YYYY-MM-DD
          "title"?: string, // Nur für addNote
          "content"?: string, // Nur für addNote
          "area"?: string // Optional für beide
        },
        "message"?: string // Eine kurze Bestätigungs- oder Informationsnachricht
      }

      Beispiele:
      Benutzer: "Ich muss morgen den Müll rausbringen."
      Antwort:
      {
        "action": "addTask",
        "data": {
          "text": "Müll rausbringen",
          "area": "Haushalt",
          "priority": "medium",
          "dueDate": "${new Date(Date.now() + 86400000).toISOString().split('T')[0]}" // Beispiel für morgen
        },
        "message": "Aufgabe 'Müll rausbringen' hinzugefügt."
      }

      Benutzer: "Notiere: Meeting-Ideen: Brainstorming für Marketingkampagne."
      Antwort:
      {
        "action": "addNote",
        "data": {
          "title": "Meeting-Ideen",
          "content": "Brainstorming für Marketingkampagne",
          "area": "Arbeit"
        },
        "message": "Notiz 'Meeting-Ideen' hinzugefügt."
      }

      Benutzer: "Sehr wichtig: Das Projekt bis Freitag abschließen."
      Antwort:
      {
        "action": "addTask",
        "data": {
          "text": "Projekt bis Freitag abschließen",
          "priority": "high",
          "area": "Arbeit",
          "dueDate": "2025-07-11" // Beispiel für Freitag
        },
        "message": "Aufgabe 'Projekt bis Freitag abschließen' mit hoher Priorität hinzugefügt."
      }

      Benutzer: "Was ist der Sinn des Lebens?"
      Antwort:
      {
        "action": "none",
        "data": {},
        "message": "Ich bin darauf spezialisiert, Ihnen bei der Organisation zu helfen. Ich kann diese Frage nicht beantworten."
      }

      Verstehe die Absicht des Benutzers und fülle die Felder entsprechend aus. Wenn ein Bereich nicht explizit genannt wird, lass 'area' leer. Wenn der Titel einer Notiz nicht klar ist, nimm die ersten paar Wörter des Inhalts. Wenn die Priorität einer Aufgabe nicht explizit genannt wird, setze sie auf "medium". Wenn kein Fälligkeitsdatum genannt wird, setze 'dueDate' auf null.

      Benutzerbefehl: "${aiCommandText}"
      `;

      chatHistory.push({ role: "user", parts: [{ text: prompt }] });
      const payload = {
        contents: chatHistory,
        generationConfig: {
          responseMimeType: "application/json",
          responseSchema: {
            type: "OBJECT",
            properties: {
              action: {
                type: "STRING",
                enum: ["addTask", "addNote", "none"]
              },
              data: {
                type: "OBJECT",
                properties: {
                  text: { type: "STRING" },
                  priority: { type: "STRING", enum: ["low", "medium", "high"] },
                  dueDate: { type: "STRING", nullable: true }, // Add dueDate to schema
                  title: { type: "STRING" },
                  content: { type: "STRING" },
                  area: { type: "STRING" }
                },
                required: []
              },
              message: { type: "STRING" }
            },
            required: ["action", "data"]
          }
        }
      };

      const apiKey = ""; // Canvas will inject the API key
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await response.json();

      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        const jsonResponse = JSON.parse(result.candidates[0].content.parts[0].text);
        const { action, data, message } = jsonResponse;

        switch (action) {
          case 'addTask':
            if (data.text) {
              await addTask(data.text, data.area, data.priority || 'medium', data.dueDate); // Pass dueDate
              setAiMessage(message || 'Aufgabe durch KI hinzugefügt.');
            } else {
              setAiMessage('KI konnte keine gültige Aufgabe extrahieren. Bitte versuche es genauer.');
            }
            break;
          case 'addNote':
            if (data.title && data.content) {
              await addNote(data.title, data.content, data.area);
              setAiMessage(message || 'Notiz durch KI hinzugefügt.');
            } else {
              setAiMessage('KI konnte keine gültige Notiz extrahieren. Bitte versuche es genauer.');
            }
            break;
          case 'none':
            setAiMessage(message || 'KI hat deinen Befehl verstanden, aber es ist keine Aktion erforderlich.');
            break;
          default:
            setAiMessage('KI hat eine unbekannte Aktion zurückgegeben.');
        }
      } else {
        setAiMessage('KI-Antwort konnte nicht verarbeitet werden. Bitte versuche es erneut.');
        console.error('Unexpected AI response structure:', result);
      }
    } catch (error) {
      console.error("Fehler beim KI-Befehl:", error);
      setAiMessage('Ein Fehler ist aufgetreten. Bitte versuche es später erneut.');
    } finally {
      setAiLoading(false);
      setAiCommandText('');
    }
  };

  // Hilfsfunktion für Prioritätsfarbe
  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return 'bg-red-600 text-white';
      case 'medium': return 'bg-yellow-600 text-white';
      case 'low': return 'bg-green-600 text-white';
      default: return 'bg-gray-600 text-white';
    }
  };

  // Hilfsfunktion für Event-Farbe
  const getEventColor = (index) => {
    const colors = ['bg-purple-600', 'bg-teal-600', 'bg-orange-600', 'bg-pink-600', 'bg-indigo-600', 'bg-lime-600', 'bg-cyan-600', 'bg-fuchsia-600']; // More distinct colors
    return colors[index % colors.length];
  };

  // Kalender-Hilfsfunktionen
  const getDaysInMonth = (month, year) => new Date(year, month + 1, 0).getDate();
  const getFirstDayOfMonth = (month, year) => new Date(year, month, 1).getDay(); // 0 for Sunday, 1 for Monday

  const getDayName = (date) => date.toLocaleString('de-DE', { weekday: 'long' });

  const getEventsForDate = (date) => {
    return events.filter(event => {
      if (!event.start || !(event.start instanceof Date) || isNaN(event.start.getTime())) {
        return false;
      }
      const eventDate = new Date(event.start);
      return eventDate.getDate() === date.getDate() &&
             eventDate.getMonth() === date.getMonth() &&
             eventDate.getFullYear() === date.getFullYear();
    }).sort((a, b) => a.start - b.start);
  };

  const getTasksForDate = (date) => {
    return tasks.filter(task => {
      if (task.completed || !task.dueDate || !(task.dueDate instanceof Date) || isNaN(task.dueDate.getTime())) {
        return false;
      }
      const taskDueDate = new Date(task.dueDate);
      return taskDueDate.getDate() === date.getDate() &&
             taskDueDate.getMonth() === date.getMonth() &&
             taskDueDate.getFullYear() === date.getFullYear();
    }).sort((a, b) => (a.createdAt?.toDate() || 0) - (b.createdAt?.toDate() || 0));
  };

  const createGoogleCalendarLink = (event) => {
    if (!event || !event.title || !event.start || !event.end) return '#';

    const formatDate = (date) => {
      return date.toISOString().replace(/[-:]|\.\d{3}/g, ''); //YYYYMMDDTHHMMSSZ
    };

    const title = encodeURIComponent(event.title);
    const dates = `${formatDate(event.start)}/${formatDate(event.end)}`;
    const details = event.area ? encodeURIComponent(`Bereich: ${event.area}`) : '';
    const location = ''; // No location in current schema

    return `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${title}&dates=${dates}&details=${details}&location=${location}&sf=true&output=xml`;
  };


  // Render-Funktionen für die verschiedenen Ansichten (vor dem Haupt-Return definiert)
  const renderMonthView = () => {
    const daysInMonth = getDaysInMonth(currentMonth, currentYear);
    const firstDay = getFirstDayOfMonth(currentMonth, currentYear); // 0 for Sunday, 1 for Monday
    const startingDay = (firstDay === 0) ? 6 : firstDay - 1; // Adjust to start week on Monday (0 for Monday)

    const blanks = [];
    for (let i = 0; i < startingDay; i++) {
      blanks.push(<div key={`blank-${i}`} className="p-2 border border-gray-700 bg-gray-800 aspect-square flex items-center justify-center text-gray-600"></div>);
    }

    const days = [];
    const today = new Date();
    const isCurrentMonth = currentMonth === today.getMonth() && currentYear === today.getFullYear();

    for (let d = 1; d <= daysInMonth; d++) {
      const date = new Date(currentYear, currentMonth, d);
      const isToday = isCurrentMonth && d === today.getDate();
      const dayEvents = getEventsForDate(date);
      const dayTasks = getTasksForDate(date); // Get tasks for the day

      days.push(
        <div
          key={`day-${d}`}
          className={`p-2 border border-gray-700 aspect-square flex flex-col items-center justify-start text-gray-200 relative
            ${isToday ? 'bg-blue-700 border-blue-500' : 'bg-gray-800 hover:bg-gray-700 cursor-pointer'}`}
          onClick={() => { setSelectedCalendarDate(date); setCalendarView('day'); }}
        >
          <span className="font-bold text-lg">{d}</span>
          {isToday && <span className="absolute top-1 right-1 text-xs text-white bg-blue-500 px-1 rounded-full">Heute</span>}
          <div className="flex flex-col items-center mt-1 w-full">
            {dayEvents.slice(0, 2).map((event, index) => (
              <div key={event.id} className={`text-xs ${getEventColor(index)} text-white rounded-full px-2 py-0.5 mt-0.5 truncate w-full text-center`}>
                {event.title}
              </div>
            ))}
            {dayEvents.length > 2 && <div className="text-xs text-purple-300 mt-1">...</div>}
            {dayTasks.length > 0 && ( // Indicator for tasks
              <div className="text-xs bg-yellow-500 text-white rounded-full px-1 py-0.5 mt-0.5">
                {dayTasks.length} {dayTasks.length === 1 ? 'Aufgabe' : 'Aufgaben'}
              </div>
            )}
          </div>
        </div>
      );
    }

    const totalSlots = [...blanks, ...days];
    const weeks = [];
    for (let i = 0; i < totalSlots.length; i += 7) {
      weeks.push(totalSlots.slice(i, i + 7));
    }

    const monthNames = [
      "Januar", "Februar", "März", "April", "Mai", "Juni",
      "Juli", "August", "September", "Oktober", "November", "Dezember"
    ];
    const dayNamesShort = ["Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"];

    const goToPreviousMonth = () => {
      setCurrentMonth(prevMonth => {
        if (prevMonth === 0) {
          setCurrentYear(prevYear => prevYear - 1);
          return 11;
        }
        return prevMonth - 1;
      });
    };

    const goToNextMonth = () => {
      setCurrentMonth(prevMonth => {
        if (prevMonth === 11) {
          setCurrentYear(prevYear => prevYear + 1);
          return 0;
        }
        return prevMonth + 1;
      });
    };

    return (
      <>
        <div className="flex justify-between items-center mb-6">
          <button
            onClick={goToPreviousMonth}
            className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out"
          >
            Vorheriger
          </button>
          <h3 className="text-2xl font-semibold text-gray-100">
            {monthNames[currentMonth]} {currentYear}
          </h3>
          <button
            onClick={goToNextMonth}
            className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out"
          >
            Nächster
          </button>
        </div>
        <div className="grid grid-cols-7 gap-1 text-center font-semibold text-gray-400 mb-2">
          {dayNamesShort.map(day => <div key={day} className="p-2">{day}</div>)}
        </div>
        <div className="grid grid-cols-7 gap-1">
          {weeks.map((week, weekIndex) => (
            <React.Fragment key={weekIndex}>
              {week.map(daySlot => daySlot)}
            </React.Fragment>
          ))}
        </div>
      </>
    );
  };

  const renderWeekView = () => {
    const dayNamesLong = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag"];
    const startOfWeek = new Date(selectedCalendarDate);
    startOfWeek.setDate(selectedCalendarDate.getDate() - (selectedCalendarDate.getDay() === 0 ? 6 : selectedCalendarDate.getDay() - 1)); // Adjust to Monday start
    startOfWeek.setHours(0, 0, 0, 0);

    const daysOfWeek = [];
    for (let i = 0; i < 7; i++) {
      const currentDay = new Date(startOfWeek);
      currentDay.setDate(startOfWeek.getDate() + i);
      daysOfWeek.push(currentDay);
    }

    const goToPreviousWeek = () => {
      const newDate = new Date(selectedCalendarDate);
      newDate.setDate(newDate.getDate() - 7);
      setSelectedCalendarDate(newDate);
    };

    const goToNextWeek = () => {
      const newDate = new Date(selectedCalendarDate);
      newDate.setDate(newDate.getDate() + 7);
      setSelectedCalendarDate(newDate);
    };

    const today = new Date();

    return (
      <>
        <div className="flex justify-between items-center mb-6">
          <button
            onClick={goToPreviousWeek}
            className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out"
          >
            Vorherige Woche
          </button>
          <h3 className="text-2xl font-semibold text-gray-100">
            Woche vom {daysOfWeek[0].toLocaleDateString('de-DE')}
          </h3>
          <button
            onClick={goToNextWeek}
            className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out"
          >
            Nächste Woche
          </button>
        </div>
        <div className="grid grid-cols-7 gap-1 h-[calc(100vh-350px)]"> {/* Added height for scroll */}
          {daysOfWeek.map((date, index) => {
            const dayOfWeekName = dayNamesLong[index];
            const dayEvents = getEventsForDate(date);
            const dayTasks = getTasksForDate(date); // Get tasks for the day
            const isCurrentDay = date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();

            return (
              <div
                key={date.toDateString()}
                className={`p-3 border border-gray-700 flex flex-col justify-start overflow-hidden ${isCurrentDay ? 'bg-blue-700 border-blue-500' : 'bg-gray-800 hover:bg-gray-700 cursor-pointer'}`}
                onClick={() => { setSelectedCalendarDate(date); setCalendarView('day'); }}
              >
                <span className="font-bold text-lg text-gray-100">{date.getDate()}. {date.toLocaleString('de-DE', { month: 'short' })}</span>
                <span className="text-sm text-gray-400">{dayOfWeekName}</span>
                <div className="flex flex-col items-center mt-2 w-full flex-grow overflow-y-auto custom-scrollbar"> {/* Added scrollbar */}
                  {dayEvents.map((event, eventIndex) => (
                    <div key={event.id} className={`text-xs ${getEventColor(eventIndex)} text-white rounded-full px-2 py-0.5 mt-1 truncate w-full text-center`}>
                      {event.title} ({event.start.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })})
                    </div>
                  ))}
                  {dayTasks.length > 0 && ( // Indicator for tasks
                    <div className="text-xs bg-yellow-500 text-white rounded-full px-1 py-0.5 mt-1">
                      {dayTasks.length} {dayTasks.length === 1 ? 'Aufgabe' : 'Aufgaben'}
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      </>
    );
  };

  const renderDayView = () => {
    const dayEvents = getEventsForDate(selectedCalendarDate);
    const dayTasks = getTasksForDate(selectedCalendarDate); // Get tasks for the day
    const hours = Array.from({ length: 24 }, (_, i) => i); // 0 to 23 hours

    const goToPreviousDay = () => {
      const newDate = new Date(selectedCalendarDate);
      newDate.setDate(newDate.getDate() - 1);
      setSelectedCalendarDate(newDate);
    };

    const goToNextDay = () => {
      const newDate = new Date(selectedCalendarDate);
      newDate.setDate(newDate.getDate() + 1);
      setSelectedCalendarDate(newDate);
    };

    return (
      <>
        <div className="flex justify-between items-center mb-6">
          <button
            onClick={goToPreviousDay}
            className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out"
          >
            Vorheriger Tag
          </button>
          <h3 className="text-2xl font-semibold text-gray-100">
            {selectedCalendarDate.toLocaleDateString('de-DE', { weekday: 'long', day: '2-digit', month: 'long', year: 'numeric' })}
          </h3>
          <button
            onClick={goToNextDay}
            className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out"
          >
            Nächster Tag
          </button>
        </div>
        <div className="bg-gray-800 p-6 rounded-xl shadow-md overflow-hidden">
          <h4 className="text-xl font-semibold text-gray-100 mb-4">Dein Tagesplan</h4>
          <div className="grid grid-cols-[auto_1fr] h-[calc(100vh-350px)] overflow-y-auto">
            <div className="flex flex-col border-r border-gray-700">
              {hours.map(hour => (
                <div key={`time-${hour}`} className="h-16 flex items-start justify-end pr-2 text-gray-400 text-sm font-mono border-b border-gray-700 last:border-b-0">
                  {String(hour).padStart(2, '0')}:00
                </div>
              ))}
            </div>
            <div className="relative">
              {hours.map(hour => (
                <div key={`hour-slot-${hour}`} className="h-16 border-b border-gray-700 last:border-b-0"></div>
              ))}
              {dayEvents.map((event, index) => {
                const startHour = event.start.getHours();
                const startMinute = event.start.getMinutes();
                const endHour = event.end.getHours();
                const endMinute = event.end.getMinutes();

                const topOffset = (startMinute / 60) * 64; // 64px per hour slot
                const durationMinutes = (event.end.getTime() - event.start.getTime()) / (1000 * 60);
                const height = (durationMinutes / 60) * 64; // 64px per hour

                return (
                  <div
                    key={event.id}
                    className={`absolute left-0 right-0 p-1 rounded-lg text-white text-xs flex flex-col justify-between ${getEventColor(index)}`}
                    style={{
                      top: `${startHour * 64 + topOffset}px`,
                      height: `${height}px`,
                      zIndex: 10,
                      marginLeft: '4px',
                      marginRight: '4px'
                    }}
                  >
                    <p className="font-semibold truncate">{event.title}</p>
                    <p className="text-xs">
                      {event.start.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })} -
                      {event.end.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}
                    </p>
                    <div className="absolute top-1 right-1 flex space-x-1">
                      <a
                        href={createGoogleCalendarLink(event)}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="p-0.5 text-white bg-black bg-opacity-30 rounded-full hover:bg-opacity-50"
                        title="Zu Google Kalender hinzufügen"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                      </a>
                      <button
                        onClick={(e) => { e.stopPropagation(); deleteEvent(event.id); }}
                        className="p-0.5 text-white bg-black bg-opacity-30 rounded-full hover:bg-opacity-50"
                        title="Ereignis löschen"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
          <div className="mt-8">
            <h4 className="text-xl font-semibold text-gray-100 mb-4">Fällige Aufgaben für heute</h4>
            {dayTasks.length === 0 ? (
              <p className="text-gray-400">Keine fälligen Aufgaben für heute.</p>
            ) : (
              <ul className="space-y-2">
                {dayTasks.map((task) => (
                  <li key={task.id} className="flex items-center text-gray-200 bg-gray-700 p-2 rounded-lg">
                    <input
                      type="checkbox"
                      checked={task.completed}
                      onChange={() => toggleTaskComplete(task.id, task.completed)}
                      className="form-checkbox h-4 w-4 text-blue-600 rounded focus:ring-blue-500 cursor-pointer bg-gray-600 border-gray-500"
                    />
                    <span className="ml-2 text-sm flex-grow">{task.text}</span>
                    {task.area && <span className="ml-2 text-xs bg-blue-800 text-blue-200 px-2 py-1 rounded-full">{task.area}</span>}
                    <button
                      onClick={() => deleteTask(task.id)}
                      className="ml-4 p-1 text-red-400 hover:text-red-300 rounded-full hover:bg-red-900 transition duration-200 ease-in-out"
                      title="Aufgabe löschen"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
      </>
    );
  };

  const renderCalendarContent = () => {
    switch (calendarView) {
      case 'month':
        return renderMonthView();
      case 'week':
        return renderWeekView();
      case 'day':
        return renderDayView();
      default:
        return renderMonthView();
    }
  };

  const renderCalendarPage = () => (
    <div className="p-6 flex flex-col lg:flex-row gap-6 h-[calc(100vh-120px)]"> {/* Use flex for layout */}
      {/* Left Sidebar for Tasks */}
      <div className="lg:w-1/4 bg-gray-800 p-6 rounded-xl shadow-lg flex-shrink-0 flex flex-col">
        <h3 className="text-xl font-semibold text-gray-100 mb-4">Deine Aufgaben</h3>
        {!userId ? (
          <p className="text-gray-400 mb-4">Bitte melde dich an, um deine Aufgaben zu sehen.</p>
        ) : (
          <>
            <div className="flex flex-col gap-2 mb-4">
              <input
                type="text"
                className="p-2 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-900 text-gray-100 placeholder-gray-400 text-sm"
                placeholder="Neue Aufgabe..."
                value={newTaskText}
                onChange={(e) => setNewTaskText(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addTask(newTaskText, newTaskArea, newTaskPriority, newTaskDueDate)}
              />
              <input
                type="date"
                className="p-2 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-900 text-gray-100 text-sm"
                value={newTaskDueDate}
                onChange={(e) => setNewTaskDueDate(e.target.value)}
              />
              <button
                onClick={() => addTask(newTaskText, newTaskArea, newTaskPriority, newTaskDueDate)}
                className="px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out text-sm"
              >
                Aufgabe hinzufügen
              </button>
            </div>
            <div className="flex-grow overflow-y-auto custom-scrollbar pr-2">
              {tasks.filter(task => !task.completed).length === 0 ? (
                <p className="text-gray-400 text-center py-4">Keine offenen Aufgaben.</p>
              ) : (
                <ul className="space-y-2">
                  {tasks.filter(task => !task.completed).map((task) => (
                    <li key={task.id} className="flex items-center bg-gray-700 p-2 rounded-lg shadow-sm">
                      <input
                        type="checkbox"
                        checked={task.completed}
                        onChange={() => toggleTaskComplete(task.id, task.completed)}
                        className="form-checkbox h-4 w-4 text-blue-600 rounded focus:ring-blue-500 cursor-pointer bg-gray-600 border-gray-500"
                      />
                      <span className="ml-2 text-sm flex-grow text-gray-100">{task.text}</span>
                      {task.dueDate && (
                        <span className="ml-2 text-xs bg-gray-600 text-gray-200 px-2 py-1 rounded-full">
                          {task.dueDate.toLocaleDateString('de-DE', { day: '2-digit', month: '2-digit' })}
                        </span>
                      )}
                      <button
                        onClick={() => deleteTask(task.id)}
                        className="ml-2 p-1 text-red-400 hover:text-red-300 rounded-full hover:bg-red-900 transition duration-200 ease-in-out"
                        title="Aufgabe löschen"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </li>
                  ))}
                </ul>
              )}
            </div>
            <button
              onClick={() => setCurrentView('tasks')}
              className="mt-4 px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out text-sm w-full"
            >
              Alle Aufgaben verwalten
            </button>
          </>
        )}
      </div>

      {/* Main Calendar Content */}
      <div className="lg:flex-grow flex flex-col">
        <h2 className="text-3xl font-bold text-gray-100 mb-6">Dein Kalender</h2>
        <div className="bg-gray-800 p-6 rounded-xl shadow-lg mb-8">
          <h3 className="text-xl font-semibold text-gray-100 mb-4">Neues Ereignis hinzufügen</h3>
          {!userId && <p className="text-red-400 mb-4">Bitte melde dich an, um Ereignisse hinzuzufügen.</p>}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <input
              type="text"
              className="p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 bg-gray-900 text-gray-100 placeholder-gray-400"
              placeholder="Titel des Ereignisses"
              value={newEventTitle}
              onChange={(e) => setNewEventTitle(e.target.value)}
              disabled={!userId}
            />
            <input
              type="date"
              className="p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 bg-gray-900 text-gray-100"
              value={newEventDate}
              onChange={(e) => setNewEventDate(e.target.value)}
              disabled={!userId}
            />
            <input
              type="time"
              className="p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 bg-gray-900 text-gray-100"
              value={newEventStartTime}
              onChange={(e) => setNewEventStartTime(e.target.value)}
              disabled={!userId}
            />
            <input
              type="time"
              className="p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 bg-gray-900 text-gray-100"
              value={newEventEndTime}
              onChange={(e) => setNewEventEndTime(e.target.value)}
              disabled={!userId}
            />
            <input
              type="text"
              className="p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 bg-gray-900 text-gray-100 placeholder-gray-400"
              placeholder="Bereich (optional)"
              value={newEventArea}
              onChange={(e) => setNewEventArea(e.target.value)}
              disabled={!userId}
            />
          </div>
          <button
            onClick={addEvent}
            className="px-6 py-3 bg-pink-600 text-white font-semibold rounded-lg shadow-md hover:bg-pink-700 transition duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={!userId}
          >
            Ereignis hinzufügen
          </button>
        </div>

        <div className="bg-gray-800 p-6 rounded-xl shadow-lg flex-grow">
          <div className="flex justify-between items-center mb-6 flex-wrap gap-2">
            <h3 className="text-xl font-semibold text-gray-100">Kalenderansicht</h3>
            <div className="flex space-x-2">
              <button
                onClick={() => {
                  setSelectedCalendarDate(new Date()); // Jump to today
                  setCalendarView('day'); // Set to day view as default for 'Today'
                }}
                className="px-4 py-2 rounded-lg font-medium bg-blue-600 text-white shadow-md hover:bg-blue-700 transition duration-300 ease-in-out"
              >
                Heute
              </button>
              <button
                onClick={() => setCalendarView('month')}
                className={`px-4 py-2 rounded-lg font-medium ${calendarView === 'month' ? 'bg-blue-600 text-white shadow-md' : 'text-gray-300 hover:bg-gray-700'}`}
              >
                Monat
              </button>
              <button
                onClick={() => setCalendarView('week')}
                className={`px-4 py-2 rounded-lg font-medium ${calendarView === 'week' ? 'bg-blue-600 text-white shadow-md' : 'text-gray-300 hover:bg-gray-700'}`}
              >
                Woche
              </button>
              <button
                onClick={() => setCalendarView('day')}
                className={`px-4 py-2 rounded-lg font-medium ${calendarView === 'day' ? 'bg-blue-600 text-white shadow-md' : 'text-gray-300 hover:bg-gray-700'}`}
              >
                Tag
              </button>
            </div>
          </div>
          {renderCalendarContent()}
        </div>
        <p className="text-sm text-gray-400 mt-6">
          <span className="inline-block w-3 h-3 rounded-full bg-blue-700 mr-2"></span>
          Heutiger Tag
        </p>
        <p className="text-sm text-gray-400 mt-2">
          <span className="inline-block w-3 h-3 rounded-full bg-purple-600 mr-2"></span>
          Eigene Ereignisse (Beispiel Farbe)
        </p>
      </div>
    </div>
  );

  const renderDashboard = () => {
    const today = new Date();
    const todayEvents = getEventsForDate(today);
    const topPriorityTasks = tasks.filter(task => !task.completed)
                                  .sort((a, b) => {
                                      const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1, '': 0, undefined: 0 };
                                      return priorityOrder[b.priority] - priorityOrder[a.priority];
                                  })
                                  .slice(0, 3); // Top 3 tasks
    const recentNotes = notes.slice(0, 3); // 3 most recent notes

    return (
      <div className="p-6">
        <h2 className="text-3xl font-bold text-gray-100 mb-6">Willkommen in deiner Chronos App!</h2>
        <p className="text-lg text-gray-300 mb-8">
          Hier kannst du dein Leben in allen Facetten einfach und umfangreich organisieren.
        </p>

        {/* KI-Assistent */}
        <div className="bg-gray-800 p-6 rounded-xl shadow-md mb-8">
          <h3 className="text-xl font-semibold text-gray-100 mb-4">KI-Assistent</h3>
          <div className="flex flex-col sm:flex-row gap-3 mb-4">
            <input
              type="text"
              className="flex-grow p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 bg-gray-900 text-gray-100 placeholder-gray-400"
              placeholder="Sag dem KI-Assistenten, was du tun möchtest (z.B. 'Füge Aufgabe hinzu: Sport machen' oder 'Notiere: Ideen für das neue Projekt')"
              value={aiCommandText}
              onChange={(e) => setAiCommandText(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleAICommand()}
              disabled={aiLoading || !userId}
            />
            <button
              onClick={handleAICommand}
              className="px-6 py-3 bg-purple-600 text-white font-semibold rounded-lg shadow-md hover:bg-purple-700 transition duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
              disabled={aiLoading || !userId}
            >
              {aiLoading ? 'Verarbeite...' : 'KI-Befehl senden'}
            </button>
          </div>
          {aiMessage && (
            <p className={`text-sm mt-2 ${aiMessage.includes('Fehler') ? 'text-red-400' : 'text-gray-300'}`}>
              {aiMessage}
            </p>
          )}
          {!userId && <p className="text-sm text-red-400 mt-2">Bitte melde dich an, um den KI-Assistenten zu nutzen.</p>}
          <p className="text-sm text-gray-400 mt-2">
            Beispiele: "Füge Aufgabe hinzu: E-Mails beantworten, Bereich: Arbeit, Priorität: hoch", "Notiere: Meeting-Protokoll vom 05.07., Inhalt: Wichtige Entscheidungen", "Notiz: Einkaufsliste, Inhalt: Milch, Brot, Eier"
          </p>
        </div>


        {/* Schnellerfassung */}
        <div className="bg-gray-800 p-6 rounded-xl shadow-md mb-8">
          <h3 className="text-xl font-semibold text-gray-100 mb-4">Schnellerfassung (Manuell)</h3>
          <div className="flex flex-col sm:flex-row gap-3 mb-4">
            <input
              type="text"
              className="flex-grow p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 bg-gray-900 text-gray-100 placeholder-gray-400"
              placeholder="Schnell hinzufügen (z.B. 'Notiz: Idee für Projekt' oder 'Einkaufen gehen')"
              value={quickAddText}
              onChange={(e) => setQuickAddText(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleQuickAdd()}
              disabled={!userId}
            />
            <input
              type="text"
              className="w-full sm:w-40 p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 bg-gray-900 text-gray-100 placeholder-gray-400"
              placeholder="Bereich (optional)"
              value={quickAddArea}
              onChange={(e) => setQuickAddArea(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleQuickAdd()}
              disabled={!userId}
            />
            <button
              onClick={handleQuickAdd}
              className="px-6 py-3 bg-purple-600 text-white font-semibold rounded-lg shadow-md hover:bg-purple-700 transition duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
              disabled={!userId}
            >
              Hinzufügen
            </button>
          </div>
          {!userId && <p className="text-sm text-red-400 mt-2">Bitte melde dich an, um die Schnellerfassung zu nutzen.</p>}
          <p className="text-sm text-gray-400 mt-2">
            Tipp: Beginne mit "Notiz:" oder "Memo:" für eine Notiz. Alles andere wird als Aufgabe hinzugefügt (Standardpriorität: Mittel).
          </p>
        </div>

        {/* Dein Fokus für heute */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <div className="bg-gray-800 p-6 rounded-xl shadow-md">
            <h3 className="text-xl font-semibold text-gray-100 mb-4">Heute anstehende Ereignisse</h3>
            {todayEvents.length === 0 ? (
              <p className="text-gray-400">Keine Ereignisse für heute.</p>
            ) : (
              <ul className="space-y-2">
                {todayEvents.map((event, index) => (
                  <li key={event.id} className={`flex items-center text-gray-200 ${getEventColor(index)} p-2 rounded-lg`}>
                    <span className="font-semibold text-sm mr-2">{event.start.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}</span>
                    <span className="text-sm flex-grow">{event.title}</span>
                    {event.area && <span className="ml-2 text-xs bg-opacity-70 px-2 py-1 rounded-full">{event.area}</span>}
                  </li>
                ))}
              </ul>
            )}
            <button
              onClick={() => { setSelectedCalendarDate(new Date()); setCurrentView('calendar'); setCalendarView('day'); }}
              className="mt-4 px-4 py-2 bg-pink-600 text-white font-semibold rounded-lg shadow-md hover:bg-pink-700 transition duration-300 ease-in-out text-sm"
            >
              Zum heutigen Tagesplan
            </button>
          </div>

          <div className="bg-gray-800 p-6 rounded-xl shadow-md">
            <h3 className="text-xl font-semibold text-gray-100 mb-4">Deine Top-Prioritätsaufgaben</h3>
            {topPriorityTasks.length === 0 ? (
              <p className="text-gray-400">Keine dringenden Aufgaben. Gut gemacht!</p>
            ) : (
              <ul className="space-y-2">
                {topPriorityTasks.map((task) => (
                  <li key={task.id} className="flex items-center text-gray-200">
                    <span className={`inline-block w-3 h-3 rounded-full mr-2 ${getPriorityColor(task.priority)}`}></span>
                    <span className="ml-2">{task.text}</span>
                    {task.area && <span className="ml-2 text-xs bg-blue-800 text-blue-200 px-2 py-1 rounded-full">{task.area}</span>}
                  </li>
                ))}
              </ul>
            )}
            <button
              onClick={() => setCurrentView('tasks')}
              className="mt-4 px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out text-sm"
            >
              Alle Aufgaben ansehen
            </button>
          </div>
        </div>

        <div className="bg-gray-800 p-6 rounded-xl shadow-md mb-8">
          <h3 className="text-xl font-semibold text-gray-100 mb-4">Neueste Notizen</h3>
          {recentNotes.length === 0 ? (
            <p className="text-gray-400">Noch keine Notizen vorhanden.</p>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {recentNotes.map((note) => (
                <div key={note.id} className="p-4 bg-gray-700 rounded-lg shadow-sm cursor-pointer hover:bg-gray-600 transition" onClick={() => handleNoteClick(note)}>
                  <p className="font-medium truncate text-gray-100">{note.title}</p>
                  <p className="text-sm text-gray-300 line-clamp-1">{note.content}</p>
                  {note.area && <span className="text-xs bg-green-800 text-green-200 px-2 py-1 rounded-full mt-1 inline-block">{note.area}</span>}
                </div>
              ))}
            </div>
          )}
          <button
            onClick={() => setCurrentView('notes')}
            className="mt-4 px-4 py-2 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 transition duration-300 ease-in-out text-sm"
          >
            Alle Notizen ansehen
          </button>
        </div>


        {/* Standard-Navigationskarten */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div className="bg-gray-800 p-6 rounded-xl shadow-md flex flex-col items-center justify-center">
            <span className="text-5xl mb-4">📝</span>
            <h3 className="text-xl font-semibold text-gray-100 mb-2">Aufgaben</h3>
            <p className="text-gray-400 text-center">Verwalte deine To-Do-Listen und bleibe organisiert.</p>
            <button
              onClick={() => setCurrentView('tasks')}
              className="mt-4 px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out"
            >
              Zu den Aufgaben
            </button>
          </div>
          <div className="bg-gray-800 p-6 rounded-xl shadow-md flex flex-col items-center justify-center">
            <span className="text-5xl mb-4">📓</span>
            <h3 className="text-xl font-semibold text-gray-100 mb-2">Notizen</h3>
            <p className="text-gray-400 text-center">Halte wichtige Gedanken und Ideen fest.</p>
            <button
              onClick={() => setCurrentView('notes')}
              className="mt-4 px-6 py-3 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 transition duration-300 ease-in-out"
            >
              Zu den Notizen
            </button>
          </div>
          <div className="bg-gray-800 p-6 rounded-xl shadow-md flex flex-col items-center justify-center">
            <span className="text-5xl mb-4">🗓️</span>
            <h3 className="text-xl font-semibold text-gray-100 mb-2">Kalender</h3>
            <p className="text-gray-400 text-center">Plane deine Termine und Ereignisse.</p>
            <button
              onClick={() => setCurrentView('calendar')}
              className="mt-4 px-6 py-3 bg-pink-600 text-white font-semibold rounded-lg shadow-md hover:bg-pink-700 transition duration-300 ease-in-out"
            >
              Zum Kalender
            </button>
          </div>
        </div>
        {userId && (
          <div className="mt-8 p-4 bg-gray-700 rounded-lg text-gray-300 text-sm text-center">
            Deine Benutzer-ID: <span className="font-mono break-all">{userId}</span>
          </div>
        )}
      </div>
    );
  };

  const renderTasks = () => (
    <div className="p-6">
      <h2 className="text-3xl font-bold text-gray-100 mb-6">Deine Aufgaben</h2>
      {!userId && <p className="text-red-400 mb-4">Bitte melde dich an, um deine Aufgaben zu verwalten.</p>}
      <div className="flex flex-col sm:flex-row mb-6 space-y-3 sm:space-y-0 sm:space-x-3">
        <input
          type="text"
          className="flex-grow p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-900 text-gray-100 placeholder-gray-400"
          placeholder="Neue Aufgabe hinzufügen..."
          value={newTaskText}
          onChange={(e) => setNewTaskText(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && addTask(newTaskText, newTaskArea, newTaskPriority, newTaskDueDate)}
          disabled={!userId}
        />
        <input
          type="text"
          className="w-full sm:w-40 p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-900 text-gray-100 placeholder-gray-400"
          placeholder="Bereich (optional)"
          value={newTaskArea}
          onChange={(e) => setNewTaskArea(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && addTask(newTaskText, newTaskArea, newTaskPriority, newTaskDueDate)}
          disabled={!userId}
        />
        <select
          className="w-full sm:w-32 p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-900 text-gray-100"
          value={newTaskPriority}
          onChange={(e) => setNewTaskPriority(e.target.value)}
          disabled={!userId}
        >
          <option value="low">Niedrig</option>
          <option value="medium">Mittel</option>
          <option value="high">Hoch</option>
        </select>
        <input
          type="date"
          className="w-full sm:w-40 p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-900 text-gray-100"
          value={newTaskDueDate}
          onChange={(e) => setNewTaskDueDate(e.target.value)}
          disabled={!userId}
        />
        <button
          onClick={() => addTask(newTaskText, newTaskArea, newTaskPriority, newTaskDueDate)}
          className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
          disabled={!userId}
        >
          Hinzufügen
        </button>
      </div>
      {tasks.length === 0 && userId ? (
        <p className="text-gray-400 text-center py-10">Noch keine Aufgaben. Füge eine neue Aufgabe hinzu!</p>
      ) : tasks.length === 0 && !userId ? (
        <p className="text-gray-400 text-center py-10">Melde dich an, um deine Aufgaben zu sehen.</p>
      ) : (
        <ul className="space-y-3">
          {tasks.map((task) => (
            <li
              key={task.id}
              className="flex items-center bg-gray-800 p-4 rounded-lg shadow-sm hover:shadow-md transition duration-200 ease-in-out"
            >
              <input
                type="checkbox"
                checked={task.completed}
                onChange={() => toggleTaskComplete(task.id, task.completed)}
                className="form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500 cursor-pointer bg-gray-700 border-gray-600"
              />
              <span
                className={`ml-4 flex-grow text-lg ${task.completed ? 'line-through text-gray-500' : 'text-gray-100'}`}
              >
                {task.text}
              </span>
              {task.area && <span className="ml-2 text-sm bg-blue-800 text-blue-200 px-2 py-1 rounded-full">{task.area}</span>}
              {task.dueDate && (
                <span className="ml-2 text-sm bg-gray-600 text-gray-200 px-2 py-1 rounded-full">
                  Fällig: {task.dueDate.toLocaleDateString('de-DE', { day: '2-digit', month: '2-digit' })}
                </span>
              )}
              <select
                className={`ml-2 p-1 rounded-lg text-sm font-semibold ${getPriorityColor(task.priority)} bg-gray-700 text-gray-100`}
                value={task.priority || 'medium'}
                onChange={(e) => updateTaskPriority(task.id, e.target.value)}
              >
                <option value="low">Niedrig</option>
                <option value="medium">Mittel</option>
                <option value="high">Hoch</option>
              </select>
              <button
                onClick={() => deleteTask(task.id)}
                className="ml-4 p-2 text-red-400 hover:text-red-300 rounded-full hover:bg-red-900 transition duration-200 ease-in-out"
                title="Löschen"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );

  const renderNotes = () => (
    <div className="p-6">
      <h2 className="text-3xl font-bold text-gray-100 mb-6">Deine Notizen</h2>
      {!userId && <p className="text-red-400 mb-4">Bitte melde dich an, um deine Notizen zu verwalten.</p>}
      <div className="mb-6 bg-gray-800 p-6 rounded-xl shadow-md">
        <h3 className="text-xl font-semibold text-gray-100 mb-4">Neue Notiz erstellen</h3>
        <input
          type="text"
          className="w-full p-3 border border-gray-700 rounded-lg mb-3 focus:outline-none focus:ring-2 focus:ring-green-500 bg-gray-900 text-gray-100 placeholder-gray-400"
          placeholder="Titel der Notiz"
          value={newNoteTitle}
          onChange={(e) => setNewNoteTitle(e.target.value)}
          disabled={!userId}
        />
        <textarea
          className="w-full p-3 border border-gray-700 rounded-lg mb-3 h-32 resize-y focus:outline-none focus:ring-2 focus:ring-green-500 bg-gray-900 text-gray-100 placeholder-gray-400"
          placeholder="Inhalt der Notiz..."
          value={newNoteContent}
          onChange={(e) => setNewNoteContent(e.target.value)}
          disabled={!userId}
        ></textarea>
        <input
          type="text"
          className="w-full p-3 border border-gray-700 rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-green-500 bg-gray-900 text-gray-100 placeholder-gray-400"
          placeholder="Bereich (optional)"
          value={newNoteArea}
          onChange={(e) => setNewNoteArea(e.target.value)}
          disabled={!userId}
        />
        <button
          onClick={() => addNote(newNoteTitle, newNoteContent, newNoteArea)}
          className="px-6 py-3 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 transition duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
          disabled={!userId}
        >
          Notiz hinzufügen
        </button>
      </div>

      {notes.length === 0 && userId ? (
        <p className="text-gray-400 text-center py-10">Noch keine Notizen. Erstelle eine neue Notiz!</p>
      ) : notes.length === 0 && !userId ? (
        <p className="text-gray-400 text-center py-10">Melde dich an, um deine Notizen zu sehen.</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {notes.map((note) => (
            <div
              key={note.id}
              className="bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition duration-200 ease-in-out cursor-pointer flex flex-col"
              onClick={() => handleNoteClick(note)}
            >
              <h3 className="text-xl font-semibold text-gray-100 mb-2 truncate">{note.title}</h3>
              <p className="text-gray-300 text-sm flex-grow line-clamp-3">{note.content}</p>
              {note.area && <span className="text-xs bg-green-800 text-green-200 px-2 py-1 rounded-full mt-2 inline-block">{note.area}</span>}
              <div className="flex justify-end mt-4">
                <button
                  onClick={(e) => { e.stopPropagation(); deleteNote(note.id); }}
                  className="p-2 text-red-400 hover:text-red-300 rounded-full hover:bg-red-900 transition duration-200 ease-in-out"
                  title="Löschen"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Notiz-Detail-Modal */}
      {selectedNote && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-gray-800 rounded-xl shadow-2xl p-8 max-w-2xl w-full max-h-[90vh] overflow-y-auto relative">
            <button
              onClick={closeNoteModal}
              className="absolute top-4 right-4 text-gray-400 hover:text-gray-100 text-3xl font-bold"
            >
              &times;
            </button>
            <h3 className="text-3xl font-bold text-gray-100 mb-4">{selectedNote.title}</h3>
            <p className="text-gray-200 whitespace-pre-wrap">{selectedNote.content}</p>
            {selectedNote.area && <p className="text-sm text-gray-400 mt-2">Bereich: <span className="font-medium">{selectedNote.area}</span></p>}
            {selectedNote.createdAt && (
              <p className="text-sm text-gray-500 mt-4">Erstellt am: {new Date(selectedNote.createdAt.toDate()).toLocaleString()}</p>
            )}
          </div>
        </div>
      )}
    </div>
  );

  const renderAuthForm = () => (
    <div className="flex items-center justify-center min-h-[calc(100vh-100px)] p-4">
      <div className="bg-gray-800 p-8 rounded-xl shadow-lg w-full max-w-md">
        <h2 className="text-3xl font-bold text-gray-100 mb-6 text-center">
          {isLoginMode ? 'Anmelden bei Chronos' : 'Registrieren bei Chronos'}
        </h2>
        {authError && <p className="text-red-400 text-center mb-4">{authError}</p>}
        <div className="space-y-4">
          <input
            type="email"
            className="w-full p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-900 text-gray-100 placeholder-gray-400"
            placeholder="E-Mail-Adresse"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            disabled={authLoading}
          />
          <input
            type="password"
            className="w-full p-3 border border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-900 text-gray-100 placeholder-gray-400"
            placeholder="Passwort"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            disabled={authLoading}
          />
          <button
            onClick={handleAuthAction}
            className="w-full px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={authLoading}
          >
            {authLoading ? 'Lade...' : (isLoginMode ? 'Anmelden' : 'Registrieren')}
          </button>
        </div>
        <button
          onClick={() => setIsLoginMode(!isLoginMode)}
          className="w-full mt-4 text-blue-400 hover:text-blue-300 text-sm"
          disabled={authLoading}
        >
          {isLoginMode ? 'Noch kein Konto? Registrieren' : 'Bereits ein Konto? Anmelden'}
        </button>
      </div>
    </div>
  );


  return (
    <div className="min-h-screen bg-gray-900 font-sans text-gray-100">
      <style>
        {`
          @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
          body {
            font-family: 'Inter', sans-serif;
          }
          .line-clamp-1 {
            display: -webkit-box;
            -webkit-line-clamp: 1;
            -webkit-box-orient: vertical;
            overflow: hidden;
          }
          .line-clamp-3 {
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
          }
          .custom-scrollbar::-webkit-scrollbar {
            width: 8px;
          }
          .custom-scrollbar::-webkit-scrollbar-track {
            background: #2d3748; /* gray-800 */
            border-radius: 10px;
          }
          .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #4a5568; /* gray-600 */
            border-radius: 10px;
          }
          .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #6b7280; /* gray-500 */
          }
        `}
      </style>
      <script src="https://cdn.tailwindcss.com"></script>

      <nav className="bg-gray-800 shadow-lg p-4 sticky top-0 z-40">
        <div className="container mx-auto flex justify-between items-center">
          <h1 className="text-2xl font-bold text-blue-500">Chronos</h1>
          <div className="flex space-x-4">
            <button
              onClick={() => setCurrentView('dashboard')}
              className={`px-4 py-2 rounded-lg font-medium ${currentView === 'dashboard' ? 'bg-blue-600 text-white shadow-md' : 'text-gray-300 hover:bg-gray-700'}`}
            >
              Dashboard
            </button>
            <button
              onClick={() => setCurrentView('tasks')}
              className={`px-4 py-2 rounded-lg font-medium ${currentView === 'tasks' ? 'bg-blue-600 text-white shadow-md' : 'text-gray-300 hover:bg-gray-700'}`}
            >
              Aufgaben
            </button>
            <button
              onClick={() => setCurrentView('notes')}
              className={`px-4 py-2 rounded-lg font-medium ${currentView === 'notes' ? 'bg-blue-600 text-white shadow-md' : 'text-gray-300 hover:bg-gray-700'}`}
            >
              Notizen
            </button>
            <button
              onClick={() => setCurrentView('calendar')}
              className={`px-4 py-2 rounded-lg font-medium ${currentView === 'calendar' ? 'bg-pink-600 text-white shadow-md' : 'text-gray-300 hover:bg-gray-700'}`}
            >
              Kalender
            </button>
            {userId ? (
              <button
                onClick={handleLogout}
                className="px-4 py-2 rounded-lg font-medium text-red-400 hover:bg-gray-700"
              >
                Abmelden
              </button>
            ) : (
              <button
                onClick={() => { setCurrentView('dashboard'); setIsLoginMode(true); }} // Go to dashboard and show login
                className="px-4 py-2 rounded-lg font-medium text-blue-400 hover:bg-gray-700"
              >
                Anmelden
              </button>
            )}
          </div>
        </div>
      </nav>

      <main className="container mx-auto mt-8 pb-8">
        {!isAuthReady ? (
          <div className="flex justify-center items-center h-64">
            <p className="text-xl text-gray-300">Lade App-Daten...</p>
          </div>
        ) : (
          userId ? (
            <>
              {currentView === 'dashboard' && renderDashboard()}
              {currentView === 'tasks' && renderTasks()}
              {currentView === 'notes' && renderNotes()}
              {currentView === 'calendar' && renderCalendarPage()}
            </>
          ) : (
            renderAuthForm()
          )
        )}
      </main>
    </div>
  );
}

export default App;
